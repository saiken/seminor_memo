○その後のDeNAのネイティブアプリ開発
池田 修

ブラウザゲーから初めて、ネイティブアプリに参入。
社内のエンジニアの評価をつけた
  → 68点中、平均4.8点。 

技術的な観点で市場分析
  → 自社で作れるレベルかどうか見た

開発要素の分析
  → プログラミングの仕方（非同期処理などが増えるとか）、
    マルチメディア、リソースマネジメント、チート
    → 予見できていたので、致命的な問題にはならず。

ゲームエンジン
  ２つ。１個だけより、競争や視野が狭まらないように。
  Unity

  LiftEngine
    Cocos2D-xベースの内製ゲームエンジン

サーバサイド
  Sakasho → 内製Baas
  IRIS → 内製のマルチゲーム量のサーバ

コールバック VS ポーリング
  コールバック、使いやすいけど、呼ばれるタイミングとかの制御ができないので、
  設計が複雑になったり。。最初からポーリングでもよかったかも。
  コールバック関数が複雑になるのは、避けましょう。
  コールバック関数では、シンプルにステータス更新だけにして、ポーリング側から処理するとか。

RDBMS VS 構造体
  マスタデータをテーブル丸ごとで配信すると、データがでかくてメモリ消費大。
  作業者によって、分割されたデータをダウンロード単位にパッケージ。
  一覧で見れた方がいいものについては、まとめておく。というハイブリッド。

  データの有効期限も重要。

Webサーバをやってた人が、ゲームサーバを作るのに、結構時間がかかっている



○DeNAのゲームを支えるプラットフォーム Sakasho
春山 誠

Sakasho
  社内のほぼすべてのゲームに使われている
  クライアントにSDKを配布。★

モバイルゲームで作る上で必要な機能を提供する内製Baas
  アカウント管理、ユーザーデータ管理、課金、マスタ配信、アセット配信、CS
    →  クライアント開発に集中できる

Ruby(Perlやめた)
  Unicorn 

Unity,C++ 向けにSDKを提供

サーバ構成
SDK → Proxyサーバ → APIサーバ → DB ⇦ 管理ツール
      オンプレ9台32Core   30台  30台

  もっとも避けたいのはサービスダウン
  後方互換性重視
  データの整合せいたんぽ

マイクロサービスやめた話
  → 独立させることで耐障害性アップ
    →  マイクロサービスやめた。デメリット増えたため。DBを分ければいとか。

エンジニアが要件定義から参加

仕様書
  → Github で管理.APIのI/F とか。
     仕様に関する議論も、GitHub上で。

実装
  → レビューベース。
    インデントとかは、robcop というツールでチェック。

テスト
  テストアプリ
    QAチームもテスト実施。

  結合テスト
    因子と水準をまず書いて、共有。
    googletestを使ったSDKのテスト。
    pull reqをJenkinsでフック。XCodeを立ち上げて、自動テスト。
    負荷テストも自動テストを使って実施。

運用
  スパイクを避ける
  キャパシティ管理
    raack-server_status を使ったworkerの枯渇監視

  継続的なパフォーマンス改善
    redis、memcacheはほぼ使っていなくて,メモリキャッシュするようにしている



○DeNAでのチート診断・脆弱性診断の取り組み
杉山俊春

セキュリティ部が実施している

DeNAでセキュリティ人材育成に取り組んでいる
  チート用のサンプルアプリを使う

攻撃者：サーバ上のデータを不正なものにしたい
  ↓のような方法
  不正な通信(リクエスト)
  不正な通信(レスポンス)
  メモリ改ざん
  データファイル改ざん
  アプリ改ざん

プロキシツール：内製のプロキシツール OWASP ZAP, BurpSuite
バイナリ解析：IDA Pro(アイダ) 
メモリ改ざんツール：自社ツール  GameGuardian

→ どこまで防ぐか決めることが大事
  ・ゲームバランスが崩壊 → ゲームの寿命を縮める
  ・ユーザーに不平等感

どう頑張っても無理な場合も。 → 運用でカバーするケースも。

メモリ改ざん、データ改ざん
  → 暗号化して保存する
     暗号化ロジック、鍵がすぐに取り出せると意味がないので、
     解析、でコンパイル対策も頑張る

解析・でコンパイル対策
  例えば、Androidの場合、重要な処理はJavaで書かず、JNIなどを使う
  難読化を頑張る
一般的なものはそのまま使わない
  鍵を動的にするとか。

バイナリにシンボルをそのままつけない
  コンパイルするときのオプション
  解析ツールでbase64とかで検索してもhitしなくなる

チート何度と対策・運用のコストを考えながらバランス良く運営していくことが重要



○DeNAの取り組むテストエンジニアリング
沖田邦夫



○コンテンツ配信ネットワークを加速するHTTP/2
Fastly 奥一穂様

H2Oの人
 もともと、WebSocket用サーバだった

Fastly でも、H2Oの開発してる

HTTP/2スケジューラ
  ブラウザが作った優先度ツリーに合わせて、レスポンスを返す
  Nginxと比較して、30%~50%早い
    TCPスロースタート（最初は遅い）があるので、スケジューラが大事

TCPバッファ制御
Cache DIgest
  HTTP/2 Push
    クライアントが欲しがっているレスポンスを先に送信できる
    ただし、クライアントがキャッシュしている場合、無駄になる.
    → cache Digests → クライアントが来やっしゅしているURLの一覧を圧縮してサーバに送る仕組み
       → ブラウザの実装待ち

Early Hint
  リクエスト処理中に、push を指示
    先に、必要なCSSとかを返してしまう
    → IETF のドラフトになった。


光の速度に勝てない
  → サーバを近くに置けばいい
    → CDN

CDN
  ・クライアントにどれだけ近いか
  ・キャッシュヒット率の高さ

実例
  ・Drupalキャッシュヒット率：90%
  ・Mavericks Invitational 99.9%

POPの旺盛
  ・メモリ：768GB
    SSD:18TB
    ネットワーク：40Gbps

   ・ルータレス
     各サーバがルートを指定してTCPパケットを送信
     ルートはVCLで制御可能(VCLという言語で)
 
H2O OSSなので、様々なコミッタ
 DeNA
 Fastly
 Justin Zhu 

TLS1.3 18年ぶりのアップデート
  より早く
    ハンドシェイクの高速か
    今まで2回通信が必要だったのを１回にとか。
  より安全
  プライバシー保護
→ 標準化がほぼ終わっている
  FireFox,Chromeは終わっている
  openSSLは4月に対応


QUIC
  次期HTTPプロトコル(HTTP/3のような位置付け）
  Google Chromeの実験がベース
  → 回線状態が悪くても動き続ける
      youtube の再生が止まるのが３割くらい減った
    ローミング可能
      IPが変わっても通信が途切れない
      電車で移動中とか。

  UDPベース

  Google,Facebook,Fastly などは実現に向けて進めている

HTTP/2の汎用化の流れ
  HTTP/2 以外を流す
    DNS
    WISH(Websocketの後継)

